var warningValue;
function reportInit(role){
	if(role==0){
		$("ul.main-menu li:eq(12)").addClass("active");
	}else{
		$("ul.main-menu li:eq(8)").addClass("active");
	}
	$("#search").click();
}
function onSearch() {
	$("#search").click(function() {
		    printWarningList("#warningList","#caption", "", "", 1, 10);
	});
	$("#export").click(function(){
		downloadReport();
	});
}
function downloadReport(){
	ajaxUtil({
		"startTime" : getStartTime(),
		"endTime" : getEndTime(),
		"startPage" : 1,
		"pageSize" : 20
	}, mainpath + "/re/downWarningReport", function(response) {
        var url = response.url;
        window.location.href=url;
	}, function(response, reason) {
	});
}

/** 日期格式转换函数* */
Date.prototype.toCommonCase = function() {
	var xYear = this.getYear();
	xYear = xYear + 1900;

	var xMonth = this.getMonth() + 1;
	if (xMonth < 10) {
		xMonth = "0" + xMonth;
	}

	var xDay = this.getDate();
	if (xDay < 10) {
		xDay = "0" + xDay;
	}
	return xYear + "-" + xMonth + "-" + xDay;
}
		
/**打印告警报表**/
function printWarningList(tableId,captionId,url,data, pageNo, pageSize) {
	ajaxUtil({
		"startTime" : getStartTime(),
		"endTime" : getEndTime(),
		"startPage" : pageNo,
		"pageSize" : pageSize
	}, mainpath + "/re/warningReport", function(response) {
		console.log(response);
		var waringReport = response.waringReport;
		var totalCount = response.totalCount;
		var province = response.province;
		var city = response.city;
		var startTime =  response.startTime;
		var comStartTime = new  Date(startTime);
		    comStartTime = comStartTime.toCommonCase();
		var endTime =  response.endTime;
	    var comEndTime = new  Date(endTime);
			    comEndTime = comEndTime.toCommonCase();
		var table = $(tableId);
		var caption = $(captionId);
		var theHtml = "<thead>"
				+ "<tr class='active'><th>区域</th><th>楼宇</th><th>楼层</th>"
				+ "<th>故障天线</th><th>网络</th><th>信号强度(dBm)"
				+ "</th><th>告警阈值(dBm)</th><th>处理状态</th><th>维护人手机号</th><th>故障时间</th></tr></thead>";
		theHtml += "<tbody>";
		var theCaption = "<thead>"
			+ "<tr ><th> <th>省份:</th>"+"<th>"+province+"&nbsp;&nbsp;</th>"+
			"<th>市地:</th>"+"<th>"+city+"&nbsp;&nbsp;</th>"
			+ "<th>开始时间:</th>"+"<th>"+comStartTime+"&nbsp;&nbsp;</th>"+
			"<th>结束时间:</th>"+"<th>"+comEndTime+"&nbsp;&nbsp;</th>"+"</tr></thead>";
		caption.html(theCaption);
			for (var i = 0; i < waringReport.length; i++) {
			var faultTime=waringReport[i].faultTime;
			var comFaultTime = new Date(faultTime);
			comFaultTime = comFaultTime.toCommonCase();
			if(waringReport[i].sendPhoneNumber == null ){
				waringReport[i].sendPhoneNumber = "空";
			}
			theHtml += "<tr>";
			theHtml += "<td>" + waringReport[i].region + "</td>";
			theHtml += "<td>" + waringReport[i].name + "</td>";
			theHtml += "<td>" + waringReport[i].floor + "</td>";
			theHtml += "<td>" + waringReport[i].description + "</td>";
			theHtml += "<td>" + waringReport[i].netWork + "</td>";
			theHtml += "<td>" + waringReport[i].value + "</td>";
			theHtml += "<td>" + waringReport[i].warningValue + "</td>";
			theHtml += "<td>" + waringReport[i].isRead + "</td>";
			theHtml += "<td>" + waringReport[i].sendPhoneNumber + "</td>";
			theHtml += "<td>" + comFaultTime + "</td>";
			theHtml += "</tr>";
			}
		theHtml += "</tbody>";
		table.html(theHtml);
		var totalPage = Math.ceil(totalCount / pageSize);
		printPage(tableId, document.getElementById("paging"), totalPage, url,
				data, pageNo, pageSize, "printWarningList");
		setIcRank();
	}, function(response, reason) {
	});                                                                                                                                                                                                        

}

/**
 * @param x [
 *            'Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas' ]
 * @param y [ {
 *            name : 'John', data : [ 5, 3, 4, 7, 2 ], stack : 'male' }, { name :
 *            'Joe', data : [ 3, 4, 4, 2, 5 ], stack : 'male' }, { name :
 *            'Jane', data : [ 2, 5, 6, 2, 1 ], stack : 'female' }, { name :
 *            'Janet', data : [ 3, 0, 4, 4, 3 ], stack : 'female' } ]
 * 
 * @param divID
 * @returns
 */
function drawHist(divID, list) {
	var x = [];
	var y = [ {
		'name' : '平均场强',
		'data' : []
	}, {
		'name' : '最大场强',
		'data' : []
	}, {
		'name' : '最小场强',
		'data' : []
	} ];

	for (var i = 0; i < list.length; i++) {
		x.push(list[i].position);
		y[0].data.push(list[i].averageStrength);
		y[1].data.push(list[i].maxRssi);
		y[2].data.push(list[i].minRssi);
	}

	$(function() {
		$(divID).highcharts({
			chart : {
				type : 'bar',
				marginTop : 80,
				marginRight : 40
			},
			title : {
				text : '定位点场强'
			},
			plotOptions : {
				series : {
					stacking : 'normal'
				}
			},
			xAxis : {
				categories : x
			},
			yAxis : {
				title : {
					text : '场强(dbm)'
				}
			},
			plotOptions : {
				column : {
					stacking : 'normal',
				}
			},
			series : y
		});
	});
}
/**
 * @param x
 *            ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
 *            'Oct', 'Nov', 'Dec']
 * @param y [{
 *            name: 'Tokyo', data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5,
 *            23.3, 18.3, 13.9, 9.6] }, { name: 'New York', data: [-0.2, 0.8,
 *            5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5] }, {
 *            name: 'Berlin', data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6,
 *            17.9, 14.3, 9.0, 3.9, 1.0] }, { name: 'London', data: [3.9, 4.2,
 *            5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8] }]
 * @param divID
 * @param list
 */
