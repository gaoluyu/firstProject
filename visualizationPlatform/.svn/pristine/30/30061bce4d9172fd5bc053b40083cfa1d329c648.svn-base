<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
    http://www.springframework.org/schema/mvc   
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.0.xsd">

	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!--创建jdbc数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${database.driver}" />
		<property name="jdbcUrl" value="${database.url}" />
		<property name="user" value="${database.username}" />
		<property name="password" value="${database.password}" />

		<property name="initialPoolSize" value="${database.initialPoolSize}" />
		<!-- 连接池的最大值 -->
		<property name="maxPoolSize" value="${database.maxPoolSize}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="minPoolSize" value="${database.minPoolSize}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="maxIdleTime" value="${database.maxIdleTime}" />
		<property name="idleConnectionTestPeriod" value="360" />
		<property name="preferredTestQuery" value="select 1" />
		<property name="acquireIncrement" value="5" />
		<property name="acquireRetryAttempts" value="50" />
		<property name="acquireRetryDelay" value="100" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="autoCommitOnClose" value="false" />
		<property name="testConnectionOnCheckout" value="true" />
		<property name="maxStatements" value="100" />
		<property name="maxStatementsPerConnection" value="5" />

	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- 集成 mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:androidServer/mapper/*.xml" />
		<property name="typeAliasesPackage" value="androidServer.bean" />
	</bean>
	<!-- 通过@Service 使Spring自动注册service层的bean,无需显式注册 -->
	<context:component-scan base-package="androidServer.service" />
	<!-- 可通过注解控制事务 ,可在dao类上标注@Transcation实现事物管理 -->
	<tx:annotation-driven />

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper ,这个一定要有，不能只通过@Repository注册，因为spring要想Mabatis的MapperScannerConfigurer注册 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="androidServer.mapper" />
	</bean>

	<!-- 如果使用@repository注解，spring会自动注册，可以不需要这个显示注解<bean id="testService" class="zhongchou.service.TestService" 
		/> -->


	<!-- 定时任务 -->
	<bean name="taskJob" class="androidServer.timerTask.TimerTask" />

	<bean id="methodInvokingJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="taskJob" />
		</property>
		<property name="targetMethod">
			<value>scan</value>
		</property>
	</bean>
	<!-- 配置触发器 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
		<property name="jobDetail">
			<ref bean="methodInvokingJobDetail" />
		</property>
		<!-- 每30分钟触发 -->
		<property name="cronExpression">
			<value>0 0-59/30 * * * ?</value>
		</property>

	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 添加触发器 -->
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>
</beans>